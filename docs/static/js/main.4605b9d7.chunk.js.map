{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcategoria","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getFifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categoria","ReactDOM","render","document","getElementById"],"mappings":"mMA0BeA,EAvBK,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAAmB,EAEFC,mBAAS,IAFP,mBAE/BC,EAF+B,KAEnBC,EAFmB,KAYtC,OACQ,sBAAMC,SATO,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAACS,GAAD,OAAUP,GAAV,mBAAyBO,OACvCN,EAAc,MAKd,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAAW,SAACP,GAAD,OAAOF,EAAcE,EAAEQ,OAAOF,a,+BCpBhDG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGII,MAAOF,GAHX,cAGbG,EAHa,gBAIIA,EAASC,OAJb,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAaZM,GAbY,4CAAH,sDCULO,EATK,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAC9B,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAMA,SCqBHO,EAtBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDN,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAgBxC,OATCC,qBAAU,WACPxB,EAASC,GAAWwB,MAAM,SAAAC,GAClBH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAACpB,IAEGqB,EDb0BK,CAAc1B,GAAlCa,EAFiB,EAEtBN,KAAaa,EAFS,EAETA,QAGrB,OACG,eAAC,WAAD,WACK,qBAAIJ,UAAU,oCAAd,cAAqDhB,KACnDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBACb,qBAAKA,UAAU,YAAf,SACUH,EAAOJ,KAAK,SAACC,GAAD,OACV,cAAC,EAAD,aAEIA,IAAMA,GACDA,GAFCA,EAAIC,aEWvBgB,EAvBM,WAAM,MAGWzC,mBAAS,CAAC,cAHrB,mBAGhB0C,EAHgB,KAGL3C,EAHK,KAKvB,OACI,eAAC,WAAD,WACI,8CACA,cAAC,EAAD,CAAaA,aAAeA,IAC5B,uBAEA,6BACM2C,EAAUnB,KAAI,SAAAT,GAAQ,OACtB,cAAC,EAAD,CAEEA,SAAWA,GADLA,Y,MCb1B6B,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4605b9d7.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({ setcategoria }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if( inputValue.trim().length > 2 ){\r\n            setcategoria( (cat) => [inputValue, ...cat ] )\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return ( \r\n            <form onSubmit={ handleSubmit }>\r\n                <input \r\n                    type=\"text\"\r\n                    value={ inputValue }\r\n                    onChange={ (e) => setInputValue(e.target.value)}\r\n                />\r\n            </form>\r\n     );\r\n}\r\n\r\nexport default AddCategory;\r\n\r\nAddCategory.propTypes = {\r\n    setcategoria: PropTypes.func.isRequired \r\n}","export const getFifs = async ( category ) => {\r\n        \r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=EM6IMaIillbUxYflUdlRytn0lqE8boWd`;\r\n    const response = await fetch( url );\r\n    const { data } = await response.json();\r\n    \r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n }","\r\nconst GifGridItem = ({ id, title, url }) => {\r\n    return ( \r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={ url } alt={ title} />\r\n            <p> { title }</p>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default GifGridItem;","import { Fragment } from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport GifGridItem from \"./GifGridItem\";\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n   \r\n\r\n    return ( \r\n       <Fragment>\r\n            <h3 className=\"animate__animated animate__fadeIn\"> { category }</h3>\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n            <div className=\"card-grid\">\r\n                    { images.map( (img) => (\r\n                        <GifGridItem \r\n                            key={ img.id } \r\n                            img={ img } \r\n                            { ...img }\r\n                        />\r\n                    ))}\r\n            </div>\r\n       </Fragment>\r\n     );\r\n}\r\n \r\nexport default GifGrid;","import { useEffect, useState } from \"react\"\r\nimport { getFifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n     useEffect(() => {\r\n        getFifs( category ).then( imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false       \r\n                })\r\n        })\r\n    }, [category])\r\n\r\n    return state;\r\n}","import { Fragment, useState } from \"react\";\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n    \r\n    // const categoria = ['One push', 'Samurai X', 'Dragon Ball']\r\n    const [categoria, setcategoria] = useState(['One punch']) \r\n\r\n    return (  \r\n        <Fragment>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setcategoria={ setcategoria }/>\r\n            <hr />\r\n\r\n            <ol>\r\n                { categoria.map(category => ( \r\n                  <GifGrid \r\n                    key={ category } \r\n                    category={ category} \r\n                />\r\n                ))}\r\n            </ol>\r\n        </Fragment>\r\n    );\r\n}\r\n \r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}